import logging
log = logging.getLogger(__name__)

import json
import os.path

import enaml
from enaml.core.api import Conditional, Include, Looper
from enaml.layout.api import vbox
from enaml.stdlib.message_box import critical
from enaml.widgets.api import (Action, CheckBox, Container, Field, Form,
                               GroupBox, HGroup, Label, MainWindow, Menu,
                               MenuBar, ObjectCombo, PushButton, VGroup)

from psi import get_config, get_config_folder
from psi.util import get_tagged_values
from psi.controller.api import Channel
from psi.core.enaml.api import load_manifest_from_file
from psi.controller.calibration.util import load_calibration
from psi.experiment.api import main_icon


def get_editable_channels(io_file):
    manifest = load_manifest_from_file(io_file, 'IOManifest')
    channels = [o for o in manifest().traverse() if isinstance(o, Channel)]
    return [c for c in channels if c.calibration_user_editable]


def configure_calibration(io_file, cal_file):
    editable_channels = get_editable_channels(io_file)

    # Load the selected calibration
    if cal_file is not None:
        load_calibration(cal_file, editable_channels)

    # Open the GUI for editing the calibration
    with enaml.imports():
        from psi.controller.calibration.calibration_gui import Main
        window = Main(io_file=io_file, channels=editable_channels,
                      modality='application_modal')
        result = window.show()


def load_defaults(launcher, experiments):
    path = get_config_folder() / 'experiment_launcher.txt'
    try:
        with path.open('r') as fh:
            settings = json.load(fh)

        es_settings = settings.pop('experiment', {})
        for experiment in experiments:
            t_settings = es_settings.get(experiment.type, {})
            e_settings = t_settings.get(experiment.name, {})
            for plugin in experiment.plugins:
                p_settings = e_settings.get(plugin.name, {})
                plugin.selected = p_settings.get('selected', plugin.selected)

        for attr, value in settings.items():
            setattr(launcher, attr, value)
    except:
        log.warn('%s does not exist', path)


def set_defaults(launcher, experiments):
    path = get_config_folder() / 'experiment_launcher.txt'
    try:
        with path.open('r') as fh:
            settings = json.load(fh)
    except:
        settings = {}

    # Save all simple attributes that might be defined on the launcher
    settings.update(get_tagged_values(launcher, 'persist'))

    # Now, handle the experiment-specific settings
    es_settings = settings.setdefault('experiment', {})
    for experiment in experiments:
        t_settings = es_settings.setdefault(experiment.type, {})
        e_settings = t_settings.setdefault(experiment.name, {})
        for plugin in experiment.plugins:
            p_settings = e_settings.setdefault(plugin.name, {})
            p_settings['selected'] = plugin.selected

    with path.open('w') as fh:
        json.dump(settings, fh, indent=2)


enamldef CalibrationGroup(HGroup):
    padding = 0
    align_widths = False
    enabled << len(get_editable_channels(launcher.io)) > 0

    ObjectCombo: select_calibration:
        items << launcher.available_calibrations[:]
        selected := launcher.calibration
        to_string = lambda x: x.stem.replace('_', ' ')

    PushButton:
        text = 'âš™'
        clicked ::
            configure_calibration(launcher.io, launcher.calibration)


enamldef LauncherView(MainWindow): main:

    attr launcher
    title << 'Psiexperiment: ' + launcher.experiment_type
    attr calibration_widgets = [Label(text='Calibration'), CalibrationGroup()]
    icon = main_icon

    initialized ::
        load_defaults(launcher, launcher.experiment_choices)

    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Set as default\tCtrl+D'
                triggered ::
                    set_defaults(launcher, launcher.experiment_choices)

    Container:

        constraints = [
            config_form.width == preferences_box.width == data_form.width == plugins_box.width,
            config_form.left == preferences_box.left == data_form.left == plugins_box.left,
            config_form.right == preferences_box.right == data_form.right == plugins_box.right,
            vbox(config_form, preferences_box, plugins_box, data_form, button_bar),
        ]

        Form: config_form:
            Label:
                text = 'Hardware configuration'

            ObjectCombo:
                items << launcher.available_io[:]
                selected := launcher.io
                to_string = lambda x: x.stem.replace('_', ' ')

            Include:
                objects << calibration_widgets

            Label:
                text = 'Experiment'

            ObjectCombo: experiment:
                items << launcher.experiment_choices
                to_string = lambda x: x.title
                selected := launcher.experiment

        GroupBox: preferences_box:
            title = 'Experiment preferences'

            CheckBox:
                text = 'Use prior preferences for {}'.format(launcher.experiment_type)
                checked := launcher.use_prior_preferences

            ObjectCombo: preferences:
                enabled << not launcher.use_prior_preferences
                constraints = [
                    width == 300
                ]
                items << launcher.available_preferences[:]
                to_string = lambda x: x.stem.replace('_', ' ')
                selected := launcher.preferences

        GroupBox: plugins_box:
            title = 'Experiment plugins'

            Looper:
                iterable << launcher.experiment.plugins
                CheckBox:
                    checked := loop_item.selected
                    text << loop_item.title
                    visible << not loop_item.required

        Form: data_form:
            Label:
                text = 'Save data?'

            CheckBox: save:
                checked := launcher.save_data

            Label:
                text = 'Experimenter'

            Field: experimenter:
                text := launcher.experimenter

            Conditional:
                condition << hasattr(launcher, 'animal')

                Label:
                    text = 'Animal'

                HGroup:
                    padding = 0

                    Field: animal:
                        text := launcher.animal

                    Conditional:
                        condition << hasattr(launcher, 'ear')

                        ObjectCombo: ear:
                            items = ['right', 'left']
                            selected := launcher.ear

            Label:
                text = 'Note'

            Field: note:
                text := launcher.note

            Label:
                text = 'Base folder'

            Label: base_folder:
                text << str(launcher.base_folder)

        HGroup: button_bar:

            PushButton: button:
                text = 'Run experiment'
                enabled << launcher.can_launch

                clicked ::
                    try:
                        launcher.launch_subprocess()
                    except Exception as e:
                        critical(main, 'Error starting experiment', str(e))
