import logging
log = logging.getLogger(__name__)

from functools import partial

from atom.api import Float
from enaml.layout.api import vbox
from enaml.widgets.api import Container, DockItem, HGroup, Label
from enaml.stdlib.fields import FloatField

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import numpy as np

from psi.context.api import (
    BaseSelector, ContextGroup, EnumParameter, Parameter
)
from psi.core.enaml.api import PSIManifest

from .abr_io import ABRIOBaseManifest


EXPERIMENT = __name__.rsplit('.', 1)[-1]


class ABRSelector(BaseSelector):

    freq_lb = Float(5.6).tag(preference=True)
    freq_ub = Float(45.2).tag(preference=True)
    freq_step = Float(0.5).tag(preference=True)

    level_lb = Float(10.0).tag(preference=True)
    level_ub = Float(80.0).tag(preference=True)
    level_step = Float(5.0).tag(preference=True)

    user_managed = False

    def get_iterator(self, cycles=None):
        level_lb = self.level_lb
        level_ub = self.level_ub
        level_step = self.level_step
        levels = np.arange(level_lb, level_ub + level_step / 2, level_step)
        levels = np.round(levels / level_step) * level_step

        freq_lb = self.freq_lb
        freq_ub = self.freq_ub
        freq_step = self.freq_step

        flb = np.log2(freq_lb)
        fub = np.log2(freq_ub) + freq_step / 2
        fi = np.round(np.arange(flb, fub, freq_step) / freq_step) * freq_step
        freqs = (2 ** fi) * 1e3

        freqs = freqs.astype('i')
        if cycles is None:
            cycles = 1

        level_param = self.find_item('target_tone_level')
        freq_param = self.find_item('target_tone_frequency')
        for i in range(cycles):
            for l in levels:
                for f in freqs:
                    yield {
                        freq_param: f,
                        level_param: l,
                    }


enamldef ABRSelectorManifest(PSIManifest): manifest:

    Extension:
        id = 'selector.' + manifest.contribution.name
        point = 'psi.experiment.workspace'

        DockItem:
            name = manifest.contribution.name + '.selector'
            title = manifest.contribution.label
            Container:
                layout_constraints => ():
                    fc = children[0].children
                    lc = children[1].children
                    constraints = [a.width == b.width for a, b in zip(fc, lc)]
                    cbox = vbox(children[0], children[1])
                    constraints.append(cbox)
                    return constraints

                HGroup:
                    share_layout = True
                    constraints = [
                        freq_lb.width == 40,
                        freq_ub.width == 40,
                        freq_step.width == 40,
                    ]
                    spacing = 5
                    padding = 0
                    align_widths = False
                    Label:
                        text = 'Frequencies:'
                    FloatField: freq_lb:
                        value := manifest.contribution.freq_lb
                    Label:
                        text = 'to'
                    FloatField: freq_ub:
                        value := manifest.contribution.freq_ub
                    Label:
                        text = 'kHz in'
                    FloatField: freq_step:
                        value := manifest.contribution.freq_step
                    Label:
                        text = 'octave steps'

                HGroup:
                    share_layout = True
                    spacing = 5
                    padding = 0
                    align_widths = False
                    Label: level_label:
                        text = 'Levels:'
                    FloatField: level_lb:
                        value := manifest.contribution.level_lb
                    Label:
                        text = 'to'
                    FloatField: level_ub:
                        value := manifest.contribution.level_ub
                    Label:
                        text = 'dB SPL in'
                    FloatField: level_step:
                        value := manifest.contribution.level_step
                    Label:
                        text = 'dB steps'


def configure_plugins(event):
    context = event.workbench.get_plugin('psi.context')
    freq = context.get_parameter('target_tone_frequency')
    level = context.get_parameter('target_tone_level')
    for p in (freq, level):
        p.visible = False
        p.editable = False
    freq.rove = True
    level.rove = True
    meta = context.get_meta('settings')
    meta.editable = False


enamldef ABRIOSimpleManifest(ABRIOBaseManifest): manifest:

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_plugins'
            handler = configure_plugins

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        ABRSelector:
            name = 'default'
            label = 'ABR stimuli'
