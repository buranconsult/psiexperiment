import logging
log = logging.getLogger(__name__)

import pandas as pd

from enaml.application import deferred_call
from enaml.core.api import Conditional
from enaml.widgets.api import Container, DockItem
from enaml.workbench.api import Extension, PluginManifest
from enaml.workbench.core.api import Command

from psi.context.api import (BoolParameter, ContextGroup, EnumParameter,
                             Parameter)
from psi.controller.api import (ContinuousInput, Detrend, Downsample,
                                EpochOutput, ExperimentAction, ExtractEpochs,
                                get_hw_ai_choices, get_hw_ao_choices,
                                IIRFilter, Input, RejectEpochs)
from psi.controller.calibration.api import (chirp_sens, ChirpCalibrate,
                                            InterpCalibration,
                                            PointCalibration, tone_sens,
                                            ToneCalibrate)
from psi.core.enaml.api import DataFrameTable
from psi.data.plots import (ChannelPlot, FFTChannelPlot, FFTContainer,
                            TimeContainer, ViewBox)
from psi.data.sinks.api import BColzStore, DisplayValue, TextStore
from psi.token.api import BandlimitedNoise, Cos2Envelope, Gate, SquareWave

################################################################################
# Microphone mixins
################################################################################
enamldef MicrophoneSignalViewMixinManifest(PluginManifest):

    id = 'microphone_signal_view_mixin'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'microphone_plot_container'
            label = 'Microphone signal'
            span = 10
            delay = 0.125

            ViewBox:
                name = 'microphone_view'
                y_min = -0.2
                y_max = 0.2

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'microphone'


enamldef MicrophoneFFTViewMixinManifest(PluginManifest): manifest:

    id = 'microphone_fft_view_mixin'

    Extension:
        id = manifest.id  + '.plots'
        point = 'psi.data.plots'

        FFTContainer:
            name = 'fft_plot_container'
            label = 'FFT'
            freq_lb = 5
            freq_ub = 50000

            ViewBox:
                y_min = -10
                y_max = 100

                FFTChannelPlot:
                    source_name = 'microphone'
                    pen_color = 'k'
                    time_span = 1


enamldef MicrophoneElicitorFFTViewMixinManifest(PluginManifest): manifest:

    id = 'microphone_elicitor_fft_view_mixin'

    Extension:
        id = manifest.id  + '.plots'
        point = 'psi.data.plots'

        FFTContainer:
            name = 'fft_plot_container'
            label = 'FFT'
            freq_lb = 5
            freq_ub = 50000

            ViewBox:
                y_min = 0
                y_max = 100

                FFTChannelPlot:
                    source_name = 'elicitor_microphone'
                    pen_color = (255, 0, 0, 255)
                    time_span = 1

                FFTChannelPlot:
                    source_name = 'microphone'
                    pen_color = 'k'
                    time_span = 1



################################################################################
# EEG mixins
################################################################################
enamldef EEGViewMixinManifest(PluginManifest): manifest:

    id = 'eeg_view_mixin'

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer:
            name = 'trial_plot_container'
            label = 'Trial timing'
            span = 2
            delay = 0.125

            ViewBox:
                name = 'ecg_view'
                y_min = -0.2
                y_max = 0.2

                ChannelPlot:
                    pen_color = 'k'
                    source_name = 'eeg_filtered'


enamldef TemperatureMixinManifest(PluginManifest): manifest:

    id = 'temperature_mixin'

    Extension:
        id = 'temperature_data'
        point = 'psi.data.sinks'

        BColzStore:
            name = 'temperature_store'
            continuous_inputs = ['temperature']

        DisplayValue:
            name = 'temperature_display'
            label = 'Temperature'
            source_name = 'temperature_decimated'

    Extension:
        id = 'temperature_io'
        point = 'psi.controller.io'

        IIRFilter:
            source_name = 'temperature'
            f_lowpass = 0.5
            btype = 'lowpass'
            ftype = 'butter'
            N = 1

            Downsample:
                name = 'temperature_decimated'
                q = 500


################################################################################
# ABR and DPOAE calibration mixins
################################################################################
enamldef CalibrationPlugin(PluginManifest): manifest:

    id = 'inear_calibration_mixin'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        Conditional:
            condition = manifest.tone_outputs is not None

            ExperimentAction:
                weight = 10
                event = 'experiment_prepare'
                command = 'psi.controller.tone_calibrate_channel'
                kwargs = {
                    'input_name': 'microphone',
                    'outputs': manifest.tone_outputs,
                    'gain': -40,
                    'max_thd': None,
                    'min_snr': 5,
                    'duration': 0.1,
                    'trim': 0.01,
                    'iti': 0,
                    'widget_name': 'calibration_result',
                    'attr_name': 'result',
                    'store_name': 'calibration_data',
                }

        Conditional:
            condition = manifest.chirp_outputs is not None

            ExperimentAction:
                weight = 10
                event = 'experiment_prepare'
                command = 'psi.controller.chirp_calibrate_channel'
                kwargs = {
                    'input_name': 'microphone',
                    'outputs': manifest.chirp_outputs,
                    'gain': -30,
                    'duration': 20e-3,
                    'iti': 1e-3,
                    'repetitions': 16,
                    'widget_name': 'calibration_result',
                    'attr_name': 'result',
                    'store_name': 'calibration_data',
                }


enamldef ABRInEarCalibrationMixinManifest(PluginManifest): manifest:

    id = 'abr_inear_calibration_mixin'

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = 'abr_tone_calibration'
            label = 'ABR tones'
            input_name = 'microphone'
            outputs = {'target': ['target_tone_frequency']}
            gain = -40
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0


enamldef DPOAEInEarCalibrationMixinManifest(PluginManifest): manifest:

    id = 'abr_inear_calibration_mixin'

    attr C

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = 'dpoae_tone_calibration'
            label = 'DPOAE primaries'
            input_name = 'microphone'
            outputs = {
                'primary': ['primary_tone_frequency'],
                'secondary': ['secondary_tone_frequency'],
            }
            gain = -40
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0


enamldef DPOAEInEarNoiseCalibrationMixinManifest(PluginManifest): manifest:

    id = 'dpoae_inear_noise_calibration_mixin'

    attr C

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ChirpCalibrate:
            name = 'elicitor_chirp_calibration'
            label = 'Elicitor calibration'
            input_name = C.elicitor_ai_channel
            outputs = ['elicitor']
            gain = -30
            duration = 20e-3
            iti = 1e-3
            repetitions = 16


################################################################################
# Enhancements to DPOAE time
################################################################################
enamldef DPOAETimeNoiseMixinManifest(PluginManifest): manifest:

    id = 'dpoae_time_noise_mixin'

    attr C

    Extension:
        id = manifest.id + '.sinks'
        point = 'psi.data.sinks'

        BColzStore:
            name = manifest.id + '.bcolz_store'
            continuous_inputs = ['elicitor_microphone']

    Extension:
        id = manifest.id + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: noise:
            name = 'noise_burst'
            label = 'noise burst'
            BandlimitedNoise:
                pass

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        EpochOutput:
            name = 'elicitor'
            label = 'Elicitor settings'
            target_name = C.elicitor_ao_channel
            configurable = False
            token = noise

        ContinuousInput:
            name = 'elicitor_microphone'
            source_name = C.elicitor_ai_channel

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'elicitor_timing'
            label = 'Elicitor timing'

            Parameter:
                name = 'elicitor_start'
                label = 'Elicitor start time (sec)'
                dtype = 'float'
                default = 5

            EnumParameter:
                name = 'elicitor_ao_channel'
                label = 'Elicitor speaker channel'
                choices = get_hw_ao_choices(manifest.workbench)
                scope = 'experiment'

            EnumParameter:
                name = 'elicitor_ai_channel'
                label = 'Elicitor microphone channel'
                choices = get_hw_ai_choices(manifest.workbench)
                scope = 'experiment'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_start'
            command = 'elicitor.start'
            kwargs = {'delay': 'elicitor_start'}


enamldef DPOAETimeTTLMixinManifest(PluginManifest): manifest:

    id = 'dpoae_time_ttl_mixin'

    attr C

    Extension:
        id = manifest.id + '.tokens'
        point = 'psi.token.tokens'

        Gate: ttl:
            name = 'ttl'
            hide = ['start_time']
            SquareWave:
                pass

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        EpochOutput: trigger:
            name = 'trigger'
            label = 'TTL'
            target_name = 'ttl_output'
            configurable = False
            token = ttl

        Input:
            source_name = 'eeg_channel'
            name = 'eeg'

            IIRFilter:
                name = 'eeg_filtered'
                N = 2
                btype = 'bandpass'
                ftype = 'butter'
                source_name = 'eeg_channel'
                passthrough = not C.digital_filter
                f_highpass = C.digital_highpass
                f_lowpass = C.digital_lowpass

                ExtractEpochs: extract:
                    name = 'erp'
                    epoch_size = 8.5e-3

                    Detrend:
                        name = 'erp_detrend'
                        mode = C.detrend_mode

                        RejectEpochs:
                            name = 'valid_erp'
                            threshold = C.reject_threshold
                            mode = C.reject_mode

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ExperimentAction:
            event = 'dpoae_start'
            command = 'trigger.start'
            kwargs = {'delay': 'ttl_start'}

        ContextGroup:
            name = 'elicitor_timing'
            label = 'Elicitor timing'

            Parameter:
                name = 'ttl_start'
                label = 'TTL start time (sec)'
                dtype = 'float'
                default = 5

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_start'
            command = 'trigger.start'
            kwargs = {'delay': 'ttl_start'}


enamldef EEGMixinManifest(PluginManifest): manifest:

    id = 'eeg_mixin'

    attr C

    Extension:
        id = manifest.id + '.io'
        point = 'psi.controller.io'

        Input:
            source_name = 'eeg_channel'
            name = 'eeg'

            IIRFilter:
                name = 'eeg_filtered'
                N = 2
                btype = 'bandpass'
                ftype = 'butter'
                source_name = 'eeg_channel'
                passthrough = not C.digital_filter
                f_highpass = C.digital_highpass
                f_lowpass = C.digital_lowpass

                ExtractEpochs: extract:
                    name = 'erp'
                    epoch_size = C.eeg_epoch_size

                    Detrend:
                        name = 'erp_detrend'
                        mode = C.detrend_mode

                        RejectEpochs:
                            name = 'valid_erp'
                            threshold = C.reject_threshold
                            mode = C.reject_mode

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'eeg'
            label = 'EEG settings'

            EnumParameter:
                name = 'detrend_mode'
                label = 'Detrend mode'
                choices = {
                    'None': 'None',
                    'constant': '"constant"',
                    'linear': '"linear"',
                }
                default = 'None'
                scope = 'experiment'

            EnumParameter:
                name = 'reject_mode'
                label = 'Reject mode'
                compact_label = 'Rej. mode'
                choices = {
                    'absolute value': '"absolute value"',
                    'amplitude (max-min)': '"amplitude"',
                }
                default = 'absolute value'
                scope = 'experiment'

            Parameter:
                name = 'reject_threshold'
                label = 'Reject threshold'
                compact_label = 'Th'
                default = 2.5
                scope = 'experiment'

            Parameter:
                name = 'eeg_epoch_size'
                label = 'Epoch size (s)'
                default = 8.5e-3
                scope = 'experiment'

        ContextGroup:
            name = 'digital_filter'
            label = 'Digital filter settings'

            BoolParameter:
                name = 'digital_filter'
                label = 'Digital filter?'
                scope = 'experiment'
                default = True

            Parameter:
                name = 'digital_highpass'
                label = 'Digital highpass filter cutoff'
                default = 300
                scope = 'experiment'

            Parameter:
                name = 'digital_lowpass'
                label = 'Digital lowpass filter cutoff'
                default = 3000
                scope = 'experiment'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware settings'

            Parameter:
                name = 'amplifier_highpass'
                label = 'Amplifier highpass filter cutoff'
                default = 10
                scope = 'experiment'

            Parameter:
                name = 'amplifier_lowpass'
                label = 'Amplifier lowpass filter cutoff'
                default = 10e3
                scope = 'experiment'

            Parameter:
                name = 'amplifier_gain'
                label = 'Amplifier gain'
                default = 100e3
                scope = 'experiment'

    Extension:
        id = manifest.id + '.store'
        point = 'psi.data.sinks'

        BColzStore:
            name = 'eeg'
            continuous_inputs = ['eeg']
            epoch_inputs = ['erp']
