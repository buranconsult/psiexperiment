import logging
log = logging.getLogger(__name__)

import atexit

from atom.api import Float, List
from enaml.core.api import d_
from enaml.widgets.api import Container, DockItem, Label
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import pandas as pd

from psi.controller.api import coroutine, ExperimentAction, Input
from psi.data.plots import (DataFramePlot, FFTContainer, ResultPlot,
                            PlotContainer, ViewBox)
from psi.data.io import dpoae

from .dpoae_base import DPOAEManifest
from .dpoae_mixins import DPOAEThreshold

EXPERIMENT = __name__.rsplit('.', 1)[-1]


from enaml.core.api import Looper
from enaml.widgets.api import Form, ObjectCombo
from psi.context.api import Expression
from psi.data.plots import MultiPlotContainer


def postprocess(event):
    try:
        plugin = event.workbench.get_plugin('psi.data')
        store = plugin.find_sink('dpoae_store')
        # atexit calls in reverse order
        atexit.register(dpoae.convert_epl, store.base_path)
        atexit.register(store._store.flush)
    except Exception as e:
        log.exception(e)


enamldef ControllerManifest(DPOAEManifest): manifest:

    Extension:
        id = EXPERIMENT + '.sinks'
        point = 'psi.data.sinks'
        DPOAEThreshold:
            pass

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = EXPERIMENT + '.postprocess'
            handler = postprocess

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

        Expression:
            # Set tone duration to a very, very large number
            parameter = 'secondary_tone_duration'
            expression = '100e6'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_acquired'
            command = 'psi.context.next_setting'
            kwargs = {'selector': 'default', 'save_prior': True}

        ExperimentAction:
            event = 'dpoae_acquired'
            command = 'dpoae.start'
            kwargs = {'delay': 1.0}

        ExperimentAction:
            event = 'context_complete'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'experiment_end'
            command = EXPERIMENT + '.postprocess'

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        MultiPlotContainer: mc:
            name = 'dpoae_results'
            label = 'DPOAE input-output functions'
            group = 'f2_frequency'

            PlotContainer:
                name << str(loop_item)
                x_min = 0
                x_max = 100

                ViewBox:
                    y_min = -20
                    y_max = 100
                    label = str(loop_item)

                    ResultPlot: grp:
                        source_name = 'analyze_dpoae'
                        x_column = 'secondary_tone_level'
                        label = 'F2'
                        pen_width = 2
                        y_column = 'f2_level'
                        pen_color = 'indianred'
                        data_filter = lambda x: x[mc.group] == loop_item

                    ResultPlot:
                        source_name << grp.source_name
                        x_column << grp.x_column
                        pen_width << grp.pen_width
                        data_filter << grp.data_filter
                        y_column = 'primary_tone_level'
                        label = 'F1'
                        pen_color = 'lightsalmon'

                    ResultPlot:
                        source_name << grp.source_name
                        pen_width << grp.pen_width
                        x_column << grp.x_column
                        data_filter << grp.data_filter
                        y_column = 'dpoae_noise_floor'
                        label = 'Noise Floor'
                        pen_color = 'lightsteelblue'

                    ResultPlot:
                        source_name << grp.source_name
                        pen_width << grp.pen_width
                        x_column << grp.x_column
                        data_filter << grp.data_filter
                        y_column = 'dpoae_level'
                        label = 'DPOAE'
                        pen_color = 'darkred'

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.workspace'

        DockItem: di:
            name = 'dpoae_status'
            title = 'Acquisition'

            attr n_fft = 0
            attr n_time = 0

            Container:
                Label:
                    text << '{} time, {} FFT'.format(n_time, n_fft)
