import logging
log = logging.getLogger(__name__)

from functools import partial

import numpy as np
from scipy import signal
from palettable.colorbrewer import qualitative
import itertools
import pandas as pd

from enaml.application import deferred_call
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import (ContextGroup, EnumParameter, OrderedContextMeta,
                             Parameter, SequenceSelector)

from psi.controller.api import ExperimentAction
from psi.controller.calibration.util import (psd, psd_freq, db, dbi,
                                             golay_pair, summarize_golay,
                                             golay_tf)

from psi.controller.api import (ControllerManifest, SelectorQueuedEpochOutput,
                                QueuedEpochOutput, ExtractEpochs, Input,
                                FIFOSignalQueue, get_hw_ao_choices,
                                get_hw_ai_choices)

from psi.controller.calibration.tone import tone_sens

from psi.token.primitives import Chirp

from psi.data.sinks.api import BColzStore, TextStore

from psi.data.plots import (EpochTimeContainer, ChannelPlot,
                            GroupedEpochAveragePlot, ChannelPlot, ViewBox,
                            FFTContainer, GroupedEpochFFTPlot)


from psi.controller.calibration.api import FlatCalibration, InterpCalibration
from psi.util import octave_space

from .calibration_mixins import configure_hardware_golay


def calculate_sens(event, grouping, filename, calc_sens):
    core = event.workbench.get_plugin('enaml.workbench.core')
    context = event.workbench.get_plugin('psi.context')
    data = event.workbench.get_plugin('psi.data')

    pt_source = data.find_sink('mic_data').get_source('pt_epoch')
    cal_source = data.find_sink('mic_data').get_source('cal_epoch')
    pt_groups = pt_source.get_epoch_groups(grouping)
    cal_groups = cal_source.get_epoch_groups(grouping)

    n = max(len(cal_groups), 3)
    cmap_name = 'Dark2_{}'.format(n)
    cmap = getattr(qualitative, cmap_name)
    colors = itertools.cycle(cmap.colors)

    summaries = []
    keys = []
    for key, color in zip(pt_groups.keys(), colors):
        name = '{}'.format(key)
        sens_summary = calc_sens(pt_source.fs, pt_groups[key], cal_groups[key],
                                 color, context, data, name)
        sens_summary = pd.DataFrame(sens_summary)
        sens_summary.set_index('frequency', inplace=True)
        summaries.append(sens_summary)
        keys.append(key)

    result = pd.concat(summaries, keys=keys, names=grouping)
    parameters = {'name': filename, 'dataframe': result}
    core.invoke_command('calibration_data.save_dataframe', parameters=parameters)
    return result


def calculate_sens_chirp(event):
    result = calculate_sens(event, ['hw_ao_chirp_level'], 'chirp_sens',
                            calculate_group_sens_chirp)
    max_gain = result.index.get_level_values('hw_ao_chirp_level').max()
    validate_sens(event, result.loc[max_gain].reset_index())


def calculate_sens_golay(event):
    result = calculate_sens(event, ['n_bits', 'output_gain'], 'golay_sens',
                            calculate_group_sens_golay)
    max_n = result.index.get_level_values('n_bits').max()
    max_gain = result.index.get_level_values('output_gain').max()
    validate_sens(event, result.loc[max_n, max_gain].reset_index())


def calculate_group_sens_chirp(fs, pt_waveform, cal_waveform, color, context,
                               data, name):

    cal_mic_sens = context.get_value('cal_mic_sens_mv') * 1e-3
    smoothing_window = context.get_value('smoothing_window')

    freq = psd_freq(pt_waveform, fs)
    pt_psd = np.mean(psd(pt_waveform, fs), axis=0)
    cal_psd = np.mean(psd(cal_waveform, fs), axis=0)

    #pt_psd = pt_summary['psd']
    #cal_psd = cal_summary['psd']
    #pt_phase = pt_summary['phase']
    #cal_phase = cal_summary['phase']

    sens = db(pt_psd) + db(cal_mic_sens) - db(cal_psd)
    #phase = pt_phase - cal_phase

    if smoothing_window > 0:
        w = signal.hamming(smoothing_window)
        w /= w.sum()
        sens = np.convolve(sens, w, mode='same')

    pt_summary = {
        'frequency': freq,
        'psd': pt_psd,
    }

    cal_summary = {
        'frequency': freq,
        'psd': cal_psd,
    }

    sens_summary = {
        'frequency': freq,
        'sens': sens,
        #'phase': phase,
    }

    def plot_data(data=data, pt_summary=pt_summary, cal_summary=cal_summary,
                  sens_summary=sens_summary, color=color, name=name):
        vb = data.find_viewbox('pt_fft')
        vb.plot(pt_summary['frequency'], db(pt_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('cal_fft')
        vb.plot(cal_summary['frequency'], db(cal_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('sens')
        vb.plot(sens_summary['frequency'], sens_summary['sens'], color,
                log_x=True, label=name)

    deferred_call(plot_data)
    return sens_summary


def calculate_group_sens_golay(fs, pt_waveform, cal_waveform, color, context,
                               data, name):
    n_bits = context.get_value('n_bits')
    n_fft = context.get_value('fft_averages')
    n_waveforms = context.get_value('waveform_averages')
    n_discard = context.get_value('discard')
    cal_mic_sens = context.get_value('cal_mic_sens_mv') * 1e-3
    smoothing_window = context.get_value('smoothing_window')

    a, b = golay_pair(n_bits)

    n = n_waveforms * n_fft + n_discard

    pt_a, pt_b = pt_waveform[n_discard:n], pt_waveform[n+n_discard:]
    pt_summary = summarize_golay(fs, a, b, pt_a, pt_b, n_waveforms)

    cal_a, cal_b = cal_waveform[n_discard:n], cal_waveform[n+n_discard:]
    cal_summary = summarize_golay(fs, a, b, cal_a, cal_b, n_waveforms)

    pt_psd = pt_summary['psd']
    cal_psd = cal_summary['psd']
    pt_phase = pt_summary['phase']
    cal_phase = cal_summary['phase']

    sens = db(pt_psd) + db(cal_mic_sens) - db(cal_psd)
    phase = pt_phase - cal_phase

    if smoothing_window > 0:
        w = signal.hamming(smoothing_window)
        w /= w.sum()
        sens = np.convolve(sens, w, mode='same')
        phase = np.convolve(phase, w, mode='same')

    sens_summary = {
        'frequency': pt_summary['frequency'],
        'sens': sens,
        'phase': phase,
    }

    def plot_data(data=data, pt_summary=pt_summary, cal_summary=cal_summary,
                  sens_summary=sens_summary, color=color, name=name):
        vb = data.find_viewbox('pt_fft')
        vb.plot(pt_summary['frequency'], db(pt_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('cal_fft')
        vb.plot(cal_summary['frequency'], db(cal_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('sens')
        vb.plot(sens_summary['frequency'], sens_summary['sens'], color,
                log_x=True, label=name)

    deferred_call(plot_data)
    return sens_summary


def validate_sens(event, sens):
    controller = event.workbench.get_plugin('psi.controller')
    context = event.workbench.get_plugin('psi.context')
    data = event.workbench.get_plugin('psi.data')
    core = event.workbench.get_plugin('enaml.workbench.core')

    output_channel = context.get_value('output_channel')
    pt_channel = context.get_value('pt_channel')
    cal_channel = context.get_value('cal_channel')
    cal_mic_sens_mv = context.get_value('cal_mic_sens_mv')
    cal_mic_sens = cal_mic_sens_mv*1e-3

    ao = controller.get_channel(output_channel)
    pt_ai = controller.get_channel(pt_channel)
    pt_ai.calibration = FlatCalibration.from_mv_pa(cal_mic_sens_mv)
    cal_ai = controller.get_channel(cal_channel)
    cal_ai.calibration = InterpCalibration(sens['frequency'], sens['sens'])

    try:
        freq_lb = context.get_value('hw_ao_chirp_start_frequency')
        freq_ub = context.get_value('hw_ao_chirp_end_frequency')
    except ValueError:
        freq_lb = 100
        freq_ub = 50000

    frequencies = octave_space(freq_lb*1e-3, freq_ub*1e-3, 0.125)*1e3
    #frequencies = octave_space(freq_lb*1e-3, freq_ub*1e-3, 0.5)*1e3

    ai_channels = [pt_channel, cal_channel]
    result = tone_sens(ao.engine, frequencies, gain=-50,
                       ao_channel_name=output_channel,
                       ai_channel_names=ai_channels)
    rms = result['rms'].unstack('channel_name')
    pt_rms = rms[pt_channel]
    cal_rms = rms[cal_channel]
    sens = db(pt_rms) + db(cal_mic_sens) - db(cal_rms)

    def plot_data(data=data, sens=sens):
        vb = data.find_viewbox('sens')
        vb.plot(sens.index, sens.values, log_x=True, kind='scatter')

    deferred_call(plot_data)
    parameters = {'name': 'tone_sensitivity', 'dataframe': result}
    core.invoke_command('calibration_data.save_dataframe', parameters=parameters)


enamldef PTManifest(ControllerManifest): manifest:

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        BColzStore:
            name = 'mic_data'
            continuous_inputs = ['pt_hw_ai', 'cal_hw_ai']
            epoch_inputs = ['pt_epoch', 'cal_epoch']

        TextStore:
            name = 'calibration_data'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        Input:
            name = 'pt_hw_ai'
            source_name = C.pt_channel
            source ::
                channel.gain = C.pt_input_gain

            ExtractEpochs:
                name = 'pt_epoch'

        Input:
            name = 'cal_hw_ai'
            source_name = C.cal_channel
            source ::
                channel.gain = C.cal_input_gain

            ExtractEpochs:
                name = 'cal_epoch'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'calibration'
            label = 'Calibration'

            EnumParameter:
                name = 'output_channel'
                label = 'Output channel'
                compact_label = 'ao'
                choices << get_hw_ao_choices(workbench)
                scope = 'experiment'

            EnumParameter:
                name = 'pt_channel'
                label = 'Probe tube mic. channel'
                choices << get_hw_ai_choices(workbench)
                scope = 'experiment'

            Parameter:
                name = 'pt_input_gain'
                label = 'Probe tube input gain (dB)'
                dtype = 'float64'
                default = 20
                scope = 'experiment'

            EnumParameter:
                name = 'cal_channel'
                label = 'Calibration mic. channel'
                choices << get_hw_ai_choices(workbench)
                scope = 'experiment'

            Parameter:
                name = 'cal_input_gain'
                label = 'Calibration input gain (dB)'
                default = 0.0
                scope = 'experiment'

            Parameter:
                name = 'cal_mic_sens_mv'
                label = 'Calibration microphone sensitivity (mV/Pa)'
                default = 0.0
                scope = 'experiment'

            Parameter:
                name = 'smoothing_window'
                label = 'Frequency smoothing window size (bins)'
                default = 25
                scope = 'experiment'

            Parameter:
                name = 'input_range'
                label = 'Expected input range (Vpp)'
                compact_label = 'ai_range'
                dtype = 'float64'
                default = 10
                scope = 'experiment'

        OrderedContextMeta: epoch_groups:
            name = 'settings'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        SequenceSelector:
            name = 'default'
            label = 'Sequence'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'cal_epoch_queue_end'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'cal_epoch_queue_end'
            command = 'psi.controller.calculate_sens'

        ExperimentAction:
            event = 'experiment_start'
            command = 'hw_ao.start'
            kwargs = {'delay': 1}

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        EpochTimeContainer:
            name = 'epoch_container_signal'
            label = 'Epoch average (signal)'
            span = 0.01

            ViewBox:
                y_min = -0.1
                y_max = 0.1
                label = 'Signal (V)'

                GroupedEpochAveragePlot:
                    label = 'PT epoch average plot'
                    source_name = 'pt_epoch'
                    pen_color_cycle = ['black', 'red']
                    groups << epoch_groups

            ViewBox:
                y_min = -0.01
                y_max = 0.01
                label = 'Signal (V)'

                GroupedEpochAveragePlot:
                    label = 'Cal. epoch average plot'
                    source_name = 'cal_epoch'
                    pen_color_cycle = ['black', 'red']
                    groups << epoch_groups

        FFTContainer:
            name = 'calibration_result'
            label = 'Calibration result'
            freq_lb = 50.0
            freq_ub = 50000

            ViewBox:
                y_min = -160
                y_max = -50
                name = 'pt_fft'
                label = 'Probe tube PSD (dB re 1V)'

            ViewBox:
                y_min = -160
                y_max = -50
                name = 'cal_fft'
                label = 'Calibration mic. PSD (dB re 1V)'

            ViewBox:
                name = 'sens'
                label = 'Probe tube sens (V/Pa)'


enamldef ChirpControllerManifest(PTManifest): manifest:

    Extension:
        id = 'signals'
        point = 'psi.token.tokens'

        Chirp: chirp:
            pass

    Extension:
        id = 'io_chirp'
        point = 'psi.controller.io'

        SelectorQueuedEpochOutput: hw_ao:
            name = 'hw_ao'
            auto_decrement = True
            configurable = False
            queue = FIFOSignalQueue()
            target_name = C.output_channel
            token = chirp
            target ::
                controller = workbench.get_plugin('psi.controller')
                channel.calibration = FlatCalibration.as_attenuation()
                pt_epoch = controller.get_input('pt_epoch')
                cal_epoch = controller.get_input('cal_epoch')
                self.connect(pt_epoch.queue.append)
                self.connect(cal_epoch.queue.append)

    Extension:
        id = 'calibration_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.calculate_sens'
            handler = calculate_sens_chirp


enamldef GolayControllerManifest(PTManifest): manifest:

    Extension:
        id = 'io_golay'
        point = 'psi.controller.io'

        QueuedEpochOutput: hw_ao:
            name = 'hw_ao'
            auto_decrement = True
            configurable = False
            queue = FIFOSignalQueue()
            target_name = C.output_channel
            target ::
                controller = workbench.get_plugin('psi.controller')
                channel.calibration = FlatCalibration.as_attenuation()
                pt_epoch = controller.get_input('pt_epoch')
                cal_epoch = controller.get_input('cal_epoch')
                self.connect(pt_epoch.queue.append)
                self.connect(cal_epoch.queue.append)

    Extension:
        id = 'context_golay'
        point = 'psi.context.items'

        ContextGroup:
            name = 'golay'
            label = 'Golay'

            Parameter:
                name = 'n_bits'
                label = 'Number of bits for Golay'
                default = 14
                scope = 'trial'

            Parameter:
                name = 'fft_averages'
                label = 'FFT averages'
                default = 4
                scope = 'experiment'

            Parameter:
                name = 'waveform_averages'
                label = 'Waveform averages'
                default = 2
                scope = 'experiment'

            Parameter:
                name = 'discard'
                label = 'Repetitions to discard'
                default = 2
                scope = 'experiment'

            Parameter:
                name = 'iti'
                label = 'Delay between repetitions (sec)'
                default = 1e-5
                scope = 'experiment'

            Parameter:
                name = 'ab_delay'
                label = 'Delay between A and B code (sec)'
                default = 2
                scope = 'experiment'

            Parameter:
                name = 'output_gain'
                label = 'Output gain'
                default = -20
                scope = 'trial'

    Extension:
        id = 'calibration_commands_golay'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_hardware'
            handler = partial(configure_hardware_golay, hw_ao, workbench)

        Command:
            id = 'psi.controller.calculate_sens'
            handler = calculate_sens_golay

    Extension:
        id = 'calibration_actions_golay'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_hardware'
            weight = 9
