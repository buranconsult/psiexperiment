from atom.api import Typed
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.layout.api import hbox, spacer, horizontal
from enaml.widgets.api import (Container, Field, CheckBox, Label, HGroup,
                               PushButton, PopupView, Form, ObjectCombo, VGroup)
from enaml.validator import Validator

from .context_item import (Result, Parameter, EnumParameter, FileParameter,
                           BoolParameter, OrderedContextMeta,
                           UnorderedContextMeta)

from .expression import ExpressionNamespace


class ContextItemValidator(Validator):

    plugin = Typed(object)
    item = Typed(object)

    def validate(self, text):
        try:
            namespace = ExpressionNamespace()
            expressions = self.plugin.all_expressions
            expressions[self.item.name] = text
            namespace.update_expressions(expressions)
            namespace.update_symbols(self.plugin.symbols)
            namespace.get_value(self.item.name)
            return True
        except:
            return False


enamldef ContextItemField(Field):
    text := context_item.expression
    validator << ContextItemValidator(
        plugin=workbench.get_plugin('psi.context'),
        item=context_item)


################################################################################
# ContextMetaPopup
# 
# Defines the view that appears when configuring details regarding the
# parameter.
################################################################################
template ContextMetaTemplate(context_meta, context_item,
                             MemberType: OrderedContextMeta):
    ObjectCombo:
        items = [None] + context_meta.get_choices(context_item)
        to_string = lambda i: '' if i is None else str(i)
        selected << context_meta.get_choice(context_item)
        selected::
            context_meta.set_choice(selected, context_item)


template ContextMetaTemplate(context_meta, context_item,
                             MemberType: UnorderedContextMeta):

    CheckBox:
        checked << context_item in context_meta.values
        checked ::
            if checked:
                values = context_meta.values.copy()
                values.add(context_item)
            else:
                values = context_meta.values.copy()
                values.remove(context_item)
            context_meta.values = values


enamldef ContextMetaPopup(PopupView): cm_popup:

    attr context_item
    attr context_meta

    VGroup:
        Form:
            Label:
                text = 'Short name'
            Field:
                text := context_item.compact_label
        Looper:
            iterable << [c for c in context_meta.values() if c.editable]
            HGroup:
                padding = 0
                Label:
                    text = loop_item.label
                DynamicTemplate:
                    base = ContextMetaTemplate
                    args = (loop_item, context_item, type(loop_item))


################################################################################
# ContextItemTemplate
################################################################################
template ContextItemTemplate(context_item, MemberType: Result):
    HGroup: group:
        spacing = 0
        padding = 0
        Label: label:
            text << context_item.label


def get_scope(context_item, workbench):
    for selector in workbench.get_plugin('psi.context').selectors.values():
        if selector.user_managed:
            return context_item.scope
    return 'experiment'


template ContextItemTemplate(context_item, MemberType: Parameter):
    DynamicTemplate:
        base = ParameterTemplate
        args = (context_item,
                type(context_item),
                get_scope(context_item, workbench))


template ParameterTemplate(context_item, MemberType, scope):
    HGroup: group:
        spacing = 0
        padding = 0
        enabled << context_item.editable
        Label: label:
            text << context_item.label
        WidgetDynamicTemplate:
            pass


template ParameterTemplate(context_item, MemberType, scope: 'experiment'):
    HGroup: group:
        spacing = 0
        padding = 0
        enabled << workbench.get_plugin('psi.controller') \
            .experiment_state not in ('running', 'paused') and \
            context_item.editable
        Label: label:
            text << context_item.label
        WidgetDynamicTemplate:
            pass


template ParameterTemplate(context_item, MemberType, scope: 'trial'):
    HGroup: group:
        spacing = 0
        padding = 0
        enabled << context_item.editable
        CheckBox: label:
            tool_tip << context_item.name
            status_tip << context_item.name
            text << context_item.label
            checked := context_item.rove
            checked ::
                pass
        WidgetDynamicTemplate:
            pass


################################################################################
# WidgetTemplate
################################################################################
enamldef WidgetDynamicTemplate(DynamicTemplate):
    base = WidgetTemplate
    args = (context_item, type(context_item))


template WidgetTemplate(context_item, MemberType):
    ContextItemField: widget:
        pass


template WidgetTemplate(context_item, MemberType: EnumParameter):
    ObjectCombo: widget:
        items << sorted(context_item.choices.keys())
        selected := context_item.selected


template WidgetTemplate(context_item, MemberType: BoolParameter):
    CheckBox: widget:
        checked << eval(context_item.expression)
        toggled ::
            if checked:
                context_item.expression = 'True'
            else:
                context_item.expression = 'False'


################################################################################
# The container to tie it all together
################################################################################
enamldef ContextItem(Container): container:
    attr context_item
    padding = 0

    HGroup:
        padding = 0
        spacing = 0
        Container: c:
            padding = 0
            DynamicTemplate: t:
                base = ContextItemTemplate
                args = (context_item, type(context_item))

        Conditional:
            condition << len(workbench.get_plugin('psi.context').get_metas(editable=True)) > 0
            PushButton: pb:
                constraints = [pb.width == pb.height == 20]
                text << 'C'
                clicked:: 
                    context_meta = workbench.get_plugin('psi.context').get_metas(editable=True)
                    cm_popup = ContextMetaPopup(parent=self,
                                                context_meta=context_meta,
                                                context_item=context_item)
                    cm_popup.show()
