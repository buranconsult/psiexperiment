from pathlib import Path

from enaml.application import deferred_call
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.layout.api import align, hbox, vbox, spacer
from enaml.stdlib.fields import FloatField
from enaml.widgets.api import (Action, Container, Field, FileDialogEx, Form,
                               GroupBox, HGroup, Label, MainWindow, Menu,
                               Notebook, ObjectCombo, Page, PopupView,
                               PushButton, VGroup)

from psi import get_config
from psi.controller.calibration.api import (ChirpCalibration,
                                            CochlearCalibration,
                                            EPLCalibration, FlatCalibration,
                                            GolayCalibration, UnityCalibration)
from psi.controller.calibration.calibration import calibration_registry

from psi.controller.channel import HardwareAIChannel

from psi.controller.calibration import util


template CalibrationTemplate(calibration, MemberType: UnityCalibration):

    Label:
        text = 'Unity passthrough (e.g., no calibration applied)'


template CalibrationTemplate(calibration, MemberType: FlatCalibration):

    HGroup:
        align_widths = False
        padding = 0

        FloatField:
            value := calibration.mv_pa

        Label:
            text = 'mV/Pa'


template CalibrationTemplate(calibration, MemberType: GolayCalibration):

    HGroup:
        padding = 0
        align_widths = False

        Label:
            text << str(calibration.source.name if calibration.source else 'No calibration loaded')

        PushButton:
            text = 'Change'
            clicked ::
                cal_path = str(get_config('CAL_ROOT'))
                path = FileDialogEx.get_existing_directory(current_path=cal_path)
                if path:
                    for k, v in calibration.load_psi_golay(path).items():
                        setattr(calibration, k, v)


template CalibrationTemplate(calibration, MemberType: ChirpCalibration):

    HGroup:
        padding = 0
        align_widths = False

        Label:
            text << str(calibration.source.name if calibration.source else 'No calibration loaded')

        PushButton:
            text = 'Change'
            clicked ::
                cal_path = str(get_config('CAL_ROOT'))
                path = FileDialogEx.get_existing_directory(current_path=cal_path)
                if path:
                    for k, v in calibration.load_psi_chirp(path).items():
                        setattr(calibration, k, v)


template CalibrationTemplate(calibration, MemberType: CochlearCalibration):

    HGroup:
        padding = 0
        align_widths = False

        Label:
            text << str(calibration.source.name if calibration.source else 'No calibration loaded')

        PushButton:
            text = 'Change'
            clicked ::
                cal_path = str(get_config('CAL_ROOT'))
                path = FileDialogEx.get_open_file_name(current_path=cal_path)
                if path:
                    for k, v in calibration.load_cochlear(path).items():
                        setattr(calibration, k, v)


template CalibrationTemplate(calibration, MemberType: EPLCalibration):

    HGroup:
        padding = 0
        align_widths = False

        Label:
            text << str(calibration.source.name if calibration.source else 'No calibration loaded')

        PushButton:
            text = 'Change'
            clicked ::
                cal_path = 'C:/Data/Probe Tube Calibrations'
                path = FileDialogEx.get_open_file_name(current_path=cal_path)
                if path:
                    for k, v in calibration.load_epl(path).items():
                        setattr(calibration, k, v)


enamldef SavePopup(PopupView): popup:

    attr file_name = 'default'
    attr file_note = ''
    attr io_file
    attr channels

    Container:
        Form:
            Label:
                text = 'Name'

            Field:
                text := file_name

            PushButton:
                text = 'Save'
                clicked ::
                    json_path = io_file.parent / io_file.stem
                    json_path.mkdir(exist_ok=True, parents=True)
                    json_file = (json_path / file_name).with_suffix('.json')
                    util.save_calibration(channels, json_file)
                    popup.close()

            PushButton:
                text = 'Cancel'
                clicked ::
                    popup.close()


enamldef Main(MainWindow): window:

    attr io_file
    attr channels
    attr selected_channel << channels[0]

    Container:

        constraints = [
            vbox(channel_list, calibration_view, hbox(save_button, spacer, close_button)),
        ]

        ObjectCombo: channel_list:
            items << channels[:]
            selected := selected_channel

        Form: calibration_view:

            Conditional:
                condition << selected_channel is not None

                Label:
                    text = 'Calibration type'

                ObjectCombo: cal_type:
                    items << list(calibration_registry.classes())
                    selected << type(selected_channel.calibration)
                    to_string = calibration_registry.label
                    selected ::
                        if type(selected_channel.calibration) != selected:
                            selected_channel.calibration = selected.as_attenuation()

                Label:
                    text = 'Calibration settings'

                VGroup:
                    padding = 0
                    DynamicTemplate:
                        base = CalibrationTemplate
                        args << (selected_channel.calibration,
                                type(selected_channel.calibration))

        PushButton: save_button:
            text << 'Save'
            clicked ::
                popup = SavePopup(io_file=io_file,
                                  channels=channels,
                                  anchor_mode='cursor')
                popup.show()


        PushButton: close_button:
            text << 'Close'
            clicked ::
                window.close()
